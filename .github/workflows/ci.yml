name: Iseya CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  security-and-quality-scanning:
    runs-on: ubuntu-latest

    steps:
      # Checkout Code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Cache pip packages
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Setup .NET 6 SDK (for OWASP)
      - name: Setup .NET 6 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      # Run OWASP Dependency Check (XML report)
      - name: Run OWASP Dependency Check
        run: |
          mkdir -p dependency-check
          curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip -o dc.zip
          unzip dc.zip -d dependency-check
          mkdir -p owasp-report
          dependency-check/dependency-check/bin/dependency-check.sh \
            --project "Iseya Task Management" \
            --scan . \
            --format XML \
            --out owasp-report \
            --prettyPrint \
            --failOnCVSS 7 \
            --enableExperimental

      # Upload OWASP Report
      - name: Upload OWASP Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: owasp-report/

      # Set up Node.js for Snyk
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install Snyk CLI
      - name: Install Snyk CLI
        run: npm install -g snyk

      # Authenticate Snyk
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      # Run Snyk Test
      - name: Run Snyk Test
        run: snyk test --all-projects --fail-on=all

      # Upload Snyk Report (JSON)
      - name: Save Snyk Report
        run: snyk test --json-file-output=snyk-report.json --all-projects || true

      - name: Upload Snyk Report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk-report.json

      # Run TruffleHog
      - name: TruffleHog Secrets Scan
        run: |
          curl -sSL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/install.sh | bash
          mkdir -p trufflehog-report
          ./trufflehog git --regex --entropy=True --branch=main https://github.com/${{ github.repository }} \
            --json > trufflehog-report/trufflehog.json || true

      - name: Upload TruffleHog Report
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-report
          path: trufflehog-report/

      # Set up Java 17 for SonarCloud
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      # Cache SonarCloud packages
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Run SonarCloud Scan
      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=iseya_dashboard
            -Dsonar.organization=iseya
            -Dsonar.host.url=https://sonarcloud.io
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Authenticate to Google Container Registry
      - name: Authenticate to Google Container Registry
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCP_JSON_KEY }}

      # Build Docker image
      - name: Build Docker image
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          docker build -t gcr.io/$GCP_PROJECT_ID/iseya-task-management:latest .

      # Push Docker image
      - name: Push Docker image
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          docker push gcr.io/$GCP_PROJECT_ID/iseya-task-management:latest

      # Install Trivy
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      # Run Trivy Vulnerability Scan
      - name: Trivy Vulnerability Scan
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          mkdir -p trivy-report
          trivy image --exit-code 0 --severity CRITICAL,HIGH \
            --format json -o trivy-report/trivy.json \
            gcr.io/$GCP_PROJECT_ID/iseya-task-management:latest

      # Upload Trivy Report
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report/
