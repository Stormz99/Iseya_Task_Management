name: Iseya CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  security-scanning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup .NET 6 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Cache OWASP Dependency Check
        uses: actions/cache@v3
        with:
          path: dependency-check
          key: ${{ runner.os }}-dependency-check-v8.4.0
          restore-keys: |
            ${{ runner.os }}-dependency-check-

      - name: Run OWASP Dependency Check
        run: |
          mkdir -p dependency-check
          if [ ! -d "dependency-check/dependency-check" ]; then
            curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip -o dc.zip
            unzip dc.zip -d dependency-check
            chmod +x dependency-check/dependency-check/bin/dependency-check.sh
          fi
          ./dependency-check/dependency-check/bin/dependency-check.sh \
            --project "Iseya Task Management" \
            --scan . \
            --format "ALL" \
            --out dependency-check/dependency-check/report

      - name: Upload Dependency Check reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-reports
          path: dependency-check/dependency-check/report/

      - name: Setup Node.js (required for Snyk CLI)
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk CLI
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth $SNYK_TOKEN

      - name: Run Snyk test
        run: snyk test --all-projects --fail-on=all

      - name: TruffleHog Scan
        uses: trufflesecurity/trufflehog@main
        with:
          scanArguments: '--regex --entropy=True --branch=main'

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Install SonarScanner CLI
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip -d $HOME/.sonar
          echo "$HOME/.sonar/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # It's simpler to hardcode this below, or set it as a secret with value https://sonarcloud.io
          SONAR_HOST_URL: https://sonarcloud.io
        run: |
          sonar-scanner \
            -Dsonar.projectKey=IseyaTaskManagement \
            -Dsonar.organization=stormz99 \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN
