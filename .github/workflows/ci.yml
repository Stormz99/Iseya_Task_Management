name: Iseya CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  security-and-quality-scanning:
    runs-on: ubuntu-latest

    steps:
      # Checkout Code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Cache pip packages
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # OWASP Dependency Check via Docker
      - name: Run OWASP Dependency Check
        run: |
          mkdir -p owasp-report
          docker run --rm \
            -v $(pwd):/src \
            -v $(pwd)/owasp-report:/report \
            owasp/dependency-check:latest \
            --scan /src \
            --format "ALL" \
            --out /report \
            --project "Iseya Task Management"

      # Upload OWASP Reports
      - name: Upload OWASP Reports
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-reports
          path: owasp-report/

      # Set up Node.js for Snyk
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install & Authenticate Snyk
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      # Run Snyk Scan
      - name: Snyk Test
        run: snyk test --all-projects --fail-on=all

      # TruffleHog Secrets Scan
      - name: TruffleHog Secrets Scan
        run: |
          curl -sSL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/install.sh | bash
          ./trufflehog git --regex --entropy=True --branch=main https://github.com/${{ github.repository }}

      # Set up Java for SonarCloud
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      # Cache SonarCloud packages
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Run SonarCloud Scan
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=iseya_dashboard
            -Dsonar.organization=iseya
            -Dsonar.host.url=https://sonarcloud.io
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Authenticate to GCR
      - name: Authenticate to Google Container Registry
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCP_JSON_KEY }}

      # Build Docker Image
      - name: Build Docker Image
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          docker build -t gcr.io/$GCP_PROJECT_ID/iseya-task-management:latest .

      # Push Docker Image
      - name: Push Docker Image
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          docker push gcr.io/$GCP_PROJECT_ID/iseya-task-management:latest

      # Trivy Vulnerability Scan
      - name: Trivy Scan on Image
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image --exit-code 1 --severity CRITICAL,HIGH gcr.io/${{ secrets.GCP_PROJECT_ID }}/iseya-task-management:latest
