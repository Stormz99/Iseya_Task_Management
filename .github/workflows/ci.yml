name: Iseya CI Pipeline

on:
  push:
    branches: [main]
  pull_request:

jobs:
  security-and-quality-scanning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup .NET 6 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      # OWASP Dependency Check
      - name: Cache OWASP Dependency Check
        uses: actions/cache@v3
        with:
          path: dependency-check
          key: ${{ runner.os }}-dependency-check-v8.4.0
          restore-keys: ${{ runner.os }}-dependency-check-

      - name: Run OWASP Dependency Check
        run: |
          mkdir -p dependency-check
          if [ ! -d "dependency-check/dependency-check" ]; then
            curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip -o dc.zip
            unzip dc.zip -d dependency-check
            chmod +x dependency-check/dependency-check/bin/dependency-check.sh
          fi
          ./dependency-check/dependency-check/bin/dependency-check.sh \
            --project "Iseya Task Management" \
            --scan . \
            --format "ALL" \
            --out dependency-check/dependency-check/report || true

      - name: Upload Dependency Check Reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-reports
          path: dependency-check/dependency-check/report/

      # Snyk Scan
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Test
        run: snyk test --all-projects --fail-on=all || true

      # TruffleHog Scan
      - name: Install TruffleHog
        run: pip install trufflehog

      - name: Run TruffleHog Scan
        run: |
          mkdir -p trufflehog-output
          trufflehog filesystem . --json > trufflehog-output/report.json || true
          zip -r trufflehog-output.zip trufflehog-output

      - name: Upload TruffleHog Report
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-report
          path: trufflehog-output.zip

      # SonarCloud Scan
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Install SonarScanner CLI
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip -d $HOME/.sonar
          echo "$HOME/.sonar/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.sources=. \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.host.url=https://sonarcloud.io || true
